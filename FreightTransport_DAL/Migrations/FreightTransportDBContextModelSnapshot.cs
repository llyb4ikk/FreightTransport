// <auto-generated />
using System;
using FreightTransport_DAL.DBContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace FreightTransport_DAL.Migrations
{
    [DbContext(typeof(FreightTransportDBContext))]
    partial class FreightTransportDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.5")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("FreightTransport_DAL.Entities.Car", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CarType")
                        .HasColumnType("int");

                    b.Property<int>("CarryingCapacity")
                        .HasColumnType("int");

                    b.Property<float>("FuelConsumption")
                        .HasColumnType("real");

                    b.Property<float?>("Height")
                        .HasColumnType("real");

                    b.Property<float?>("Length")
                        .HasColumnType("real");

                    b.Property<string>("Model")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<float?>("Widthf")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.ToTable("Cars");
                });

            modelBuilder.Entity("FreightTransport_DAL.Entities.CarDriver", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<int>("Experience")
                        .HasColumnType("int");

                    b.Property<string>("MiddleName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Surname")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("CarDrivers");
                });

            modelBuilder.Entity("FreightTransport_DAL.Entities.Cargo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClientId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float?>("Height")
                        .HasColumnType("real");

                    b.Property<float?>("Length")
                        .HasColumnType("real");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("Weight")
                        .HasColumnType("real");

                    b.Property<float?>("Width")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("Cargos");
                });

            modelBuilder.Entity("FreightTransport_DAL.Entities.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<float>("EastLongitude")
                        .HasColumnType("real");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("NorthLatitude")
                        .HasColumnType("real");

                    b.Property<int>("Region")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("FreightTransport_DAL.Entities.Route", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Cost")
                        .HasColumnType("int");

                    b.Property<int>("DestinationCityId")
                        .HasColumnType("int");

                    b.Property<double>("Distance")
                        .HasColumnType("float");

                    b.Property<int>("StartCityId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DestinationCityId");

                    b.HasIndex("StartCityId");

                    b.ToTable("Routes");
                });

            modelBuilder.Entity("FreightTransport_DAL.Entities.Transportation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("ArrivalDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CarDriverId")
                        .HasColumnType("int");

                    b.Property<int?>("CarDriverSecondId")
                        .HasColumnType("int");

                    b.Property<int?>("CarDriverSecondId1")
                        .HasColumnType("int");

                    b.Property<int>("CarId")
                        .HasColumnType("int");

                    b.Property<int>("CargoId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DepartureDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("RouteId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CarDriverSecondId");

                    b.HasIndex("CarDriverSecondId1");

                    b.HasIndex("CarId");

                    b.HasIndex("CargoId")
                        .IsUnique();

                    b.HasIndex("RouteId");

                    b.ToTable("Transportations");
                });

            modelBuilder.Entity("FreightTransport_DAL.Entities.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CountOfOrders")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("MiddleName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("FreightTransport_DAL.Entities.Cargo", b =>
                {
                    b.HasOne("FreightTransport_DAL.Entities.User", "Client")
                        .WithMany("Cargos")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Client");
                });

            modelBuilder.Entity("FreightTransport_DAL.Entities.Route", b =>
                {
                    b.HasOne("FreightTransport_DAL.Entities.City", "DestinationCity")
                        .WithMany("DestinationRoutes")
                        .HasForeignKey("DestinationCityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FreightTransport_DAL.Entities.City", "StartCity")
                        .WithMany("StartRoutes")
                        .HasForeignKey("StartCityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("DestinationCity");

                    b.Navigation("StartCity");
                });

            modelBuilder.Entity("FreightTransport_DAL.Entities.Transportation", b =>
                {
                    b.HasOne("FreightTransport_DAL.Entities.CarDriver", "CarDriver")
                        .WithMany("Transportations")
                        .HasForeignKey("CarDriverSecondId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("FreightTransport_DAL.Entities.CarDriver", "CarDriverSecond")
                        .WithMany()
                        .HasForeignKey("CarDriverSecondId1");

                    b.HasOne("FreightTransport_DAL.Entities.Car", "Car")
                        .WithMany("Transportations")
                        .HasForeignKey("CarId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FreightTransport_DAL.Entities.Cargo", "Cargo")
                        .WithOne("Transportation")
                        .HasForeignKey("FreightTransport_DAL.Entities.Transportation", "CargoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FreightTransport_DAL.Entities.Route", "Route")
                        .WithMany("Transportations")
                        .HasForeignKey("RouteId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Car");

                    b.Navigation("CarDriver");

                    b.Navigation("CarDriverSecond");

                    b.Navigation("Cargo");

                    b.Navigation("Route");
                });

            modelBuilder.Entity("FreightTransport_DAL.Entities.Car", b =>
                {
                    b.Navigation("Transportations");
                });

            modelBuilder.Entity("FreightTransport_DAL.Entities.CarDriver", b =>
                {
                    b.Navigation("Transportations");
                });

            modelBuilder.Entity("FreightTransport_DAL.Entities.Cargo", b =>
                {
                    b.Navigation("Transportation");
                });

            modelBuilder.Entity("FreightTransport_DAL.Entities.City", b =>
                {
                    b.Navigation("DestinationRoutes");

                    b.Navigation("StartRoutes");
                });

            modelBuilder.Entity("FreightTransport_DAL.Entities.Route", b =>
                {
                    b.Navigation("Transportations");
                });

            modelBuilder.Entity("FreightTransport_DAL.Entities.User", b =>
                {
                    b.Navigation("Cargos");
                });
#pragma warning restore 612, 618
        }
    }
}
